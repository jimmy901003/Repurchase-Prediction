{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 使用三年的資料(2014-2016)，預測顧客在第四年(2017)會不會來買?會買多少?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Order Date</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Order Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">AA-10315</th>\n",
       "      <th>2014-03-31</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-09-30</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-10-31</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-03-31</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-30</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">ZD-21925</th>\n",
       "      <th>2014-08-31</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-04-30</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-05-31</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-31</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-30</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4619 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Order Date\n",
       "Customer ID Order Date            \n",
       "AA-10315    2014-03-31           1\n",
       "            2014-09-30           1\n",
       "            2015-10-31           1\n",
       "            2016-03-31           1\n",
       "            2017-06-30           1\n",
       "...                            ...\n",
       "ZD-21925    2014-08-31           1\n",
       "            2016-04-30           1\n",
       "            2016-05-31           1\n",
       "            2016-07-31           1\n",
       "            2017-06-30           1\n",
       "\n",
       "[4619 rows x 1 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "      <th>2016</th>\n",
       "      <th>2017</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>918</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>919</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>920</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>921</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>922</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>923 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     2014  2015  2016 2017\n",
       "0       1     1     1    N\n",
       "1       1     1     1    N\n",
       "2       1     1     1    N\n",
       "3       1     1     1    N\n",
       "4       1     1     1    N\n",
       "..    ...   ...   ...  ...\n",
       "918     1     1     2    N\n",
       "919     1     1     2    N\n",
       "920     1     1     1    N\n",
       "921     1     1     1    N\n",
       "922     1     1     1    N\n",
       "\n",
       "[923 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y_test</th>\n",
       "      <th>y_test_pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>900</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>484</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477</th>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>624</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>442</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>784</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>559</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>277 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    y_test y_test_pred\n",
       "900      N           N\n",
       "484      N           N\n",
       "477      Y           N\n",
       "624      N           N\n",
       "105      N           N\n",
       "..     ...         ...\n",
       "231      N           N\n",
       "300      N           N\n",
       "442      N           N\n",
       "784      N           N\n",
       "559      N           N\n",
       "\n",
       "[277 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Accuracy Score:  0.9061371841155235\n",
      "F1 Score:  0.9507575757575758\n",
      "Classification Report: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           N       0.91      1.00      0.95       251\n",
      "           Y       0.00      0.00      0.00        26\n",
      "\n",
      "    accuracy                           0.91       277\n",
      "   macro avg       0.45      0.50      0.48       277\n",
      "weighted avg       0.82      0.91      0.86       277\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "d:\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "d:\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "d:\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import datetime \n",
    "from sklearn.preprocessing import LabelEncoder,MinMaxScaler\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\n",
    "from sklearn.metrics import f1_score, roc_curve, roc_auc_score, classification_report\n",
    "from sklearn.linear_model import LogisticRegression,LinearRegression\n",
    "\n",
    "df = pd.read_csv('[FN] Saledata.csv',encoding = ('latin1') )\n",
    "plt.rcParams['font.sans-serif'] = ['Microsoft JhengHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "#將Order Date轉換為日期格式\n",
    "df['Order Date']=pd.to_datetime(df['Order Date'])\n",
    "df[\"Order Date\"] = df['Order Date'].values.astype(\"datetime64\")\n",
    "e_date = datetime.datetime.strptime('2016-12-31', '%Y-%m-%d').date()\n",
    "a_date = datetime.datetime.strptime('2016-1-1', '%Y-%m-%d').date()\n",
    "e2_date = datetime.datetime.strptime('2015-12-31', '%Y-%m-%d').date()\n",
    "a2_date = datetime.datetime.strptime('2015-1-1', '%Y-%m-%d').date()\n",
    "e3_date = datetime.datetime.strptime('2014-12-31', '%Y-%m-%d').date()\n",
    "a3_date = datetime.datetime.strptime('2014-1-1', '%Y-%m-%d').date()\n",
    "\n",
    "#將特徵資料做整理(這邊可以截圖整理的結果)\n",
    "monthly_repeat_customers_df = df.groupby([\n",
    "    'Customer ID',pd.Grouper(key='Order Date',freq='M') \n",
    "]).agg({\n",
    "    'Order Date': lambda x: x.nunique(),\n",
    "})\n",
    "display(monthly_repeat_customers_df)\n",
    "monthly_repeat_customers_df.columns = [\"count\"]\n",
    "repeat_df = monthly_repeat_customers_df.reset_index()\n",
    "#新增一個欄位叫\"回購\"，將會回購大於1的顧客標為Y(表會回購)與N(表不會回購)\n",
    "repeat_df[\"repo\"] = repeat_df[\"count\"].map(lambda x:\"Y\" if (x>1) else \"N\")\n",
    "# display(repeat_df)\n",
    "# display(repeat_df_x)\n",
    "\n",
    "#篩選2014-2016年的資料與2017年的資料\n",
    "df_2014 = repeat_df[repeat_df[\"Order Date\"].between(pd.Timestamp(a3_date),pd.Timestamp(e3_date))]\n",
    "df_2014_x = df_2014[[\"count\"]].reset_index(level=0,drop = True).reset_index(drop=True).copy()\n",
    "df_2015 = repeat_df[repeat_df[\"Order Date\"].between(pd.Timestamp(a2_date),pd.Timestamp(e2_date))]\n",
    "df_2015_x = df_2015[[\"count\"]].reset_index(level=0,drop = True).reset_index(drop=True).copy()\n",
    "df_2016 = repeat_df[repeat_df[\"Order Date\"].between(pd.Timestamp(a_date),pd.Timestamp(e_date))]\n",
    "df_2016_x = df_2016[[\"count\"]].reset_index(level=0,drop = True).reset_index(drop=True).copy()\n",
    "df_2017 = repeat_df[repeat_df[\"Order Date\"]>pd.Timestamp(e_date)]\n",
    "df_2017_x = df_2017[[ \"repo\" ]].reset_index(level=0,drop = True).reset_index(drop=True).copy()\n",
    "df_all = pd.DataFrame()\n",
    "df_all[\"2014\"] = df_2014_x\n",
    "df_all[\"2015\"] = df_2015_x\n",
    "df_all[\"2016\"] = df_2016_x\n",
    "df_all[\"2017\"] = df_2017_x\n",
    "display(df_all)\n",
    "\n",
    "\n",
    "df_x = df_all[[\"2014\",\"2015\",\"2016\"]]\n",
    "# #將資料正規化\n",
    "scaler = MinMaxScaler()\n",
    "features = pd.DataFrame(scaler.fit_transform(df_x),columns=df_x.columns)\n",
    "\n",
    "df_y = df_all[\"2017\"]\n",
    "# #切割資料(訓練資料與測試資料，看你這邊要不要放個截圖(不一定要))\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(features, df_y, test_size=0.3, random_state=42, stratify = df_y) \n",
    "\n",
    "# #建立回購模型\n",
    "repo_model = LogisticRegression()\n",
    "repo_model.fit(x_train , y_train )\n",
    "y_test_pred = repo_model.predict(x_test) \n",
    "prd = pd.DataFrame()\n",
    "prd[\"y_test\"] =y_test\n",
    "prd[\"y_test_pred\"] = y_test_pred\n",
    "#prd可以看到測試資料與預測資料的對比\n",
    "# display(y_test_pred)\n",
    "display(prd)\n",
    "# #這邊是預測出來的分數\n",
    "print(\"\\n\\nAccuracy Score: \", metrics.accuracy_score(y_test,y_test_pred))\n",
    "print(\"F1 Score: \", f1_score(y_test, repo_model.predict(x_test),pos_label=\"N\"))\n",
    "print(\"Classification Report: \\n\", classification_report(y_test, y_test_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "      <th>2016</th>\n",
       "      <th>2017</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>726.548</td>\n",
       "      <td>26.960</td>\n",
       "      <td>4406.072</td>\n",
       "      <td>374.480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>29.500</td>\n",
       "      <td>178.370</td>\n",
       "      <td>16.768</td>\n",
       "      <td>56.860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.520</td>\n",
       "      <td>5.248</td>\n",
       "      <td>513.520</td>\n",
       "      <td>149.872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>34.272</td>\n",
       "      <td>84.960</td>\n",
       "      <td>589.520</td>\n",
       "      <td>15.552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27.460</td>\n",
       "      <td>1971.460</td>\n",
       "      <td>1157.980</td>\n",
       "      <td>12.960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>918</th>\n",
       "      <td>9.090</td>\n",
       "      <td>1132.840</td>\n",
       "      <td>91.544</td>\n",
       "      <td>173.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>919</th>\n",
       "      <td>3116.490</td>\n",
       "      <td>1745.710</td>\n",
       "      <td>92.090</td>\n",
       "      <td>39.900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>920</th>\n",
       "      <td>1549.770</td>\n",
       "      <td>193.260</td>\n",
       "      <td>563.940</td>\n",
       "      <td>164.340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>921</th>\n",
       "      <td>38.976</td>\n",
       "      <td>559.930</td>\n",
       "      <td>1269.870</td>\n",
       "      <td>74.352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>922</th>\n",
       "      <td>244.760</td>\n",
       "      <td>35.208</td>\n",
       "      <td>3.000</td>\n",
       "      <td>70.950</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>923 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         2014      2015      2016     2017\n",
       "0     726.548    26.960  4406.072  374.480\n",
       "1      29.500   178.370    16.768   56.860\n",
       "2      16.520     5.248   513.520  149.872\n",
       "3      34.272    84.960   589.520   15.552\n",
       "4      27.460  1971.460  1157.980   12.960\n",
       "..        ...       ...       ...      ...\n",
       "918     9.090  1132.840    91.544  173.400\n",
       "919  3116.490  1745.710    92.090   39.900\n",
       "920  1549.770   193.260   563.940  164.340\n",
       "921    38.976   559.930  1269.870   74.352\n",
       "922   244.760    35.208     3.000   70.950\n",
       "\n",
       "[923 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y_test_s</th>\n",
       "      <th>y_test_s_pred</th>\n",
       "      <th>diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>739</th>\n",
       "      <td>0.395252</td>\n",
       "      <td>0.046092</td>\n",
       "      <td>0.349159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>740</th>\n",
       "      <td>0.000157</td>\n",
       "      <td>0.045133</td>\n",
       "      <td>0.044976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>741</th>\n",
       "      <td>0.031964</td>\n",
       "      <td>0.056294</td>\n",
       "      <td>0.024330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>742</th>\n",
       "      <td>0.000271</td>\n",
       "      <td>0.045113</td>\n",
       "      <td>0.044841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>743</th>\n",
       "      <td>0.035550</td>\n",
       "      <td>0.044789</td>\n",
       "      <td>0.009239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>918</th>\n",
       "      <td>0.016384</td>\n",
       "      <td>0.047870</td>\n",
       "      <td>0.031486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>919</th>\n",
       "      <td>0.003668</td>\n",
       "      <td>0.043840</td>\n",
       "      <td>0.040172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>920</th>\n",
       "      <td>0.015521</td>\n",
       "      <td>0.041339</td>\n",
       "      <td>0.025818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>921</th>\n",
       "      <td>0.006950</td>\n",
       "      <td>0.043083</td>\n",
       "      <td>0.036133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>922</th>\n",
       "      <td>0.006625</td>\n",
       "      <td>0.044833</td>\n",
       "      <td>0.038207</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>184 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     y_test_s  y_test_s_pred      diff\n",
       "739  0.395252       0.046092  0.349159\n",
       "740  0.000157       0.045133  0.044976\n",
       "741  0.031964       0.056294  0.024330\n",
       "742  0.000271       0.045113  0.044841\n",
       "743  0.035550       0.044789  0.009239\n",
       "..        ...            ...       ...\n",
       "918  0.016384       0.047870  0.031486\n",
       "919  0.003668       0.043840  0.040172\n",
       "920  0.015521       0.041339  0.025818\n",
       "921  0.006950       0.043083  0.036133\n",
       "922  0.006625       0.044833  0.038207\n",
       "\n",
       "[184 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'mse：0.005362622635645281'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import datetime \n",
    "from sklearn.preprocessing import LabelEncoder,MinMaxScaler\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV ,KFold\n",
    "from sklearn.metrics import f1_score, roc_curve, roc_auc_score, classification_report,mean_squared_error\n",
    "from sklearn.linear_model import LogisticRegression,LinearRegression\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "df = pd.read_csv('[FN] Saledata.csv',encoding = ('latin1') )\n",
    "plt.rcParams['font.sans-serif'] = ['Microsoft JhengHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "#這邊同上\n",
    "df['Order Date']=pd.to_datetime(df['Order Date'])\n",
    "df[\"Order Date\"] = df['Order Date'].values.astype(\"datetime64\")\n",
    "e_date = datetime.datetime.strptime('2016-12-31', '%Y-%m-%d').date()\n",
    "a_date = datetime.datetime.strptime('2016-1-1', '%Y-%m-%d').date()\n",
    "e2_date = datetime.datetime.strptime('2015-12-31', '%Y-%m-%d').date()\n",
    "a2_date = datetime.datetime.strptime('2015-1-1', '%Y-%m-%d').date()\n",
    "e3_date = datetime.datetime.strptime('2014-12-31', '%Y-%m-%d').date()\n",
    "a3_date = datetime.datetime.strptime('2014-1-1', '%Y-%m-%d').date()\n",
    "\n",
    "#同上\n",
    "repeat_df = df.groupby([\n",
    "    'Customer ID',pd.Grouper(key='Order Date',freq='M') \n",
    "]).agg({\n",
    "    'Sales':lambda x:x.sum(),\n",
    "}).reset_index()\n",
    "# display(monthly_repeat_customers_df)\n",
    "\n",
    "df_2014 = repeat_df[repeat_df[\"Order Date\"].between(pd.Timestamp(a3_date),pd.Timestamp(e3_date))]\n",
    "df_2014_x = df_2014[[\"Sales\"]].reset_index(level=0,drop = True).reset_index(drop=True).copy()\n",
    "df_2015 = repeat_df[repeat_df[\"Order Date\"].between(pd.Timestamp(a2_date),pd.Timestamp(e2_date))]\n",
    "df_2015_x = df_2015[[\"Sales\"]].reset_index(level=0,drop = True).reset_index(drop=True).copy()\n",
    "df_2016 = repeat_df[repeat_df[\"Order Date\"].between(pd.Timestamp(a_date),pd.Timestamp(e_date))]\n",
    "df_2016_x = df_2016[[\"Sales\"]].reset_index(level=0,drop = True).reset_index(drop=True).copy()\n",
    "df_2017 = repeat_df[repeat_df[\"Order Date\"]>pd.Timestamp(e_date)]\n",
    "df_2017_x = df_2017[[\"Sales\"]].reset_index(level=0,drop = True).reset_index(drop=True).copy()\n",
    "df_all = pd.DataFrame()\n",
    "df_all[\"2014\"] = df_2014_x\n",
    "df_all[\"2015\"] = df_2015_x\n",
    "df_all[\"2016\"] = df_2016_x\n",
    "df_all[\"2017\"] = df_2017_x\n",
    "display(df_all)\n",
    "# display(df_2017_x.head())\n",
    "\n",
    "# #同上\n",
    "scaler = MinMaxScaler()\n",
    "features = pd.DataFrame(scaler.fit_transform(df_all),columns=df_all.columns)\n",
    "# display(features)\n",
    "df_y = features[\"2017\"]\n",
    "df_x = features[[\"2014\",\"2015\",\"2016\"]]\n",
    "# display(df_x)\n",
    "\n",
    "# #同上\n",
    "#K 折交叉驗證 \n",
    "kf = KFold(n_splits=5)\n",
    "for train_index, test_index in kf.split(df_x):\n",
    "    x_train, x_test = df_x.iloc[train_index], df_x.iloc[test_index]\n",
    "    y_train, y_test = df_y.iloc[train_index], df_y.iloc[test_index]\n",
    "# display(x_train)\n",
    "# display(x_test)\n",
    "# display(y_train)\n",
    "# display(y_test)\n",
    "\n",
    "# #建立模型\n",
    "sales_model = LinearRegression()\n",
    "sales_model.fit(x_train,y_train)\n",
    "y_test_pred = sales_model.predict(x_test)\n",
    "prd_s = pd.DataFrame()\n",
    "prd_s[\"y_test_s\"] = y_test\n",
    "prd_s[\"y_test_s_pred\"] = y_test_pred\n",
    "prd_s[\"diff\"] = abs(prd_s[\"y_test_s\"] - prd_s[\"y_test_s_pred\"])\n",
    "display(prd_s)\n",
    "\n",
    "#這邊是分數\n",
    "mse = mean_squared_error(y_test , y_test_pred)\n",
    "display(f\"mse：{mse}\")\n",
    "\n",
    "# x_test_array = np.array(x_test)\n",
    "# y_test_array = np.array(y_test)\n",
    "# y_test_pred_array = np.array(y_test_pred)\n",
    "# display(x_test_array)\n",
    "# plt.scatter(x_test_array, y_test_array, color='blue', marker='o')\n",
    "# plt.plot(x_test_array, y_test_pred_array, color='red', linewidth=2)\n",
    "# plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "b09ec625f77bf4fd762565a912b97636504ad6ec901eb2d0f4cf5a7de23e1ee5"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
